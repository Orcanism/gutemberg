"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
describe('isValidCoordinates', () => {
    it('should return null if the input is undefined', () => {
        expect(utils_1.isValidCoordinates(undefined)).toBe(false);
    });
    it('should return false if the input is not an object', () => {
        expect(utils_1.isValidCoordinates('foo')).toBe(false);
    });
    it("should return false if the input doesn't contain longitude and latitude", () => {
        expect(utils_1.isValidCoordinates({})).toBe(false);
        expect(utils_1.isValidCoordinates({ longitude: '' })).toBe(false);
        expect(utils_1.isValidCoordinates({ latitude: '' })).toBe(false);
    });
    it('should return true for valid coordinates', () => {
        const latitude = 59.332438;
        const longitude = 18.118813;
        expect(utils_1.isValidCoordinates({ latitude, longitude })).toBe(true);
    });
});
describe('isValidCode', () => {
    it('returns null for non-string input', () => {
        expect(utils_1.isValidCode(undefined)).toBe(false);
        expect(utils_1.isValidCode(42)).toBe(false);
        expect(utils_1.isValidCode({})).toBe(false);
    });
    it('returns null for invalid length', () => {
        expect(utils_1.isValidCode('')).toBe(false);
        expect(utils_1.isValidCode('23')).toBe(false);
        expect(utils_1.isValidCode('23456789CFGH')).toBe(false); // 12
    });
    it('returns null for invalid digits', () => {
        expect(utils_1.isValidCode('1AB')).toBe(false);
        expect(utils_1.isValidCode('9FFW84J9-XG')).toBe(false);
        expect(utils_1.isValidCode('  9FFW84J9+XG  ')).toBe(false);
    });
    it('isValidCodes the plus code', () => {
        expect(utils_1.isValidCode('9FFW84J9+XG')).toBe(true);
    });
});
describe('digitToValue', () => {
    it('converts digits to values', () => {
        expect(utils_1.digitToValue('2')).toEqual(0);
        expect(utils_1.digitToValue('9')).toEqual(7);
        expect(utils_1.digitToValue('F')).toEqual(9);
        expect(utils_1.digitToValue('W')).toEqual(18);
    });
});
describe('valueToDigit', () => {
    it('converts values to digits', () => {
        expect(utils_1.valueToDigit(0)).toEqual('2');
        expect(utils_1.valueToDigit(7)).toEqual('9');
        expect(utils_1.valueToDigit(9)).toEqual('F');
        expect(utils_1.valueToDigit(18)).toEqual('W');
    });
});
describe('parseNum', () => {
    it('passes through floats', () => {
        expect(utils_1.parseNum(1.5)).toBe(1.5);
    });
    it('parses strings', () => {
        expect(utils_1.parseNum('3.14')).toBe(3.14);
    });
});
describe('arrayOf', () => {
    it('returns an array of n null elements', () => {
        expect(utils_1.arrayOf(5, null)).toEqual([null, null, null, null, null]);
        expect(utils_1.arrayOf(0, null)).toEqual([]);
    });
    it('returns an array of n defined elements', () => {
        expect(utils_1.arrayOf(3, 42)).toEqual([42, 42, 42]);
        expect(utils_1.arrayOf(3, '0')).toEqual(['0', '0', '0']);
    });
});
describe('zip', () => {
    it('zips two arrays', () => {
        expect(utils_1.zip([1, 2, 3], [10, 20, 30])).toEqual([[1, 10], [2, 20], [3, 30]]);
    });
    it('zips two arrays of different types', () => {
        expect(utils_1.zip([1, 2, 3], ['a', 'b', 'c'])).toEqual([[1, 'a'], [2, 'b'], [3, 'c']]);
    });
});
describe('flatten', () => {
    it('flattens arrays of arrays', () => {
        expect(utils_1.flatten([[1, 2, 3], [4, 5, 6]])).toEqual([1, 2, 3, 4, 5, 6]);
    });
    it('does nothing with already flat array', () => {
        expect(utils_1.flatten([1, 2, 3])).toEqual([1, 2, 3]);
    });
    it('flattens arrays in mixed array', () => {
        expect(utils_1.flatten([[1, 2, 3], 4, [5, 6]])).toEqual([1, 2, 3, 4, 5, 6]);
    });
});
//# sourceMappingURL=utils.spec.js.map